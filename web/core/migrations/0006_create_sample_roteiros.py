# Generated by Django 5.1.6 on 2025-03-18 02:46

from django.db import migrations
import uuid
from django.utils import timezone

def create_sample_roteiros(apps, schema_editor):
    # Obter os modelos necessários
    User = apps.get_model('core', 'User')
    Categorias = apps.get_model('core', 'Categorias')
    Atracoes = apps.get_model('core', 'Atracoes')
    Roteiros = apps.get_model('core', 'Roteiros')
    RoteiroAtracao = apps.get_model('core', 'RoteiroAtracao')

    # Encontrar ou criar um usuário para associar aos roteiros
    try:
        user = User.objects.filter(is_superuser=True).first()
        if not user:
            user = User.objects.first()
        if not user:
            # Criar um usuário se não existir nenhum
            user = User.objects.create(
                id=uuid.uuid4(),
                username='admin_demo',
                nome='Administrador Demo',
                is_staff=True,
                is_superuser=True,
                created_at=timezone.now()
            )
    except Exception as e:
        print(f"Erro ao obter usuário: {e}")
        return

    # Encontrar ou criar categoria para os roteiros
    try:
        categoria_turismo = Categorias.objects.filter(descricao__icontains='turismo').first()
        if not categoria_turismo:
            categoria_turismo = Categorias.objects.create(
                id=uuid.uuid4(),
                descricao='Roteiros Turísticos',
                created_at=timezone.now()
            )
    except Exception as e:
        print(f"Erro ao obter categoria: {e}")
        return

    # Obter atrações existentes
    try:
        atracoes = {
            'projeto_tamar': Atracoes.objects.filter(nome__icontains='Projeto Tamar').first(),
            'praia_costa': Atracoes.objects.filter(nome__icontains='Praia da Costa').first(),
            'restaurante_oca': Atracoes.objects.filter(nome__icontains='Restaurante A Oca').first(),
            'morro_moreno': Atracoes.objects.filter(nome__icontains='Morro do Moreno').first(),
            'convento_penha': Atracoes.objects.filter(nome__icontains='Convento da Penha').first(),
            'restaurante_papaguth': Atracoes.objects.filter(nome__icontains='Restaurante Papaguth').first(),
            'parque_vale': Atracoes.objects.filter(nome__icontains='Parque da Vale').first(),
            'yoga_praia': Atracoes.objects.filter(nome__icontains='Yoga na Praia').first(),
            'bike_calcadao': Atracoes.objects.filter(nome__icontains='Bike').first(),
            'restaurante_elgitano': Atracoes.objects.filter(nome__icontains='Restaurante Elgitano').first(),
            'cinema_brizz': Atracoes.objects.filter(nome__icontains='Cinema').first(),
            'centro_historico': Atracoes.objects.filter(nome__icontains='Centro Histórico').first(),
            'passeio_veleiro': Atracoes.objects.filter(nome__icontains='Passeio de Veleiro').first(),
            'restaurante_senac': Atracoes.objects.filter(nome__icontains='Restaurante Hotel Senac').first(),
        }
    except Exception as e:
        print(f"Erro ao obter atrações: {e}")
        return

    # Verificar atrações encontradas e substituir as que faltam pelas disponíveis
    atracoes_list = list(Atracoes.objects.all())
    for key, atracao in atracoes.items():
        if not atracao and atracoes_list:
            atracoes[key] = atracoes_list.pop(0)

    # 1. Criar roteiro de 2 dias
    roteiro_2dias = Roteiros.objects.create(
        id=uuid.uuid4(),
        titulo='Final de Semana em Vitória',
        descricao='Roteiro de 2 dias para aproveitar o melhor de Vitória e Vila Velha',
        user=user,
        categoria=categoria_turismo,
        public=True,
        duracao=2,
        created_at=timezone.now()
    )

    # Adicionar atrações ao roteiro de 2 dias
    roteiro_2dias_atracoes = [
        # Dia 1
        {'atracao': atracoes['projeto_tamar'], 'dia': 1, 'ordem': 1},
        {'atracao': atracoes['praia_costa'], 'dia': 1, 'ordem': 2},
        {'atracao': atracoes['restaurante_oca'], 'dia': 1, 'ordem': 3},
        # Dia 2
        {'atracao': atracoes['morro_moreno'], 'dia': 2, 'ordem': 4},
        {'atracao': atracoes['convento_penha'], 'dia': 2, 'ordem': 5},
        {'atracao': atracoes['restaurante_papaguth'], 'dia': 2, 'ordem': 6},
    ]

    for item in roteiro_2dias_atracoes:
        if item['atracao']:
            RoteiroAtracao.objects.create(
                id=uuid.uuid4(),
                roteiro=roteiro_2dias,
                atracao=item['atracao'],
                dia=item['dia'],
                ordem=item['ordem'],
                created_at=timezone.now()
            )

    # 2. Criar roteiro de 4 dias
    roteiro_4dias = Roteiros.objects.create(
        id=uuid.uuid4(),
        titulo='Experiência Completa na Grande Vitória',
        descricao='Roteiro completo de 4 dias para conhecer os melhores pontos turísticos, praias, parques e restaurantes da Grande Vitória',
        user=user,
        categoria=categoria_turismo,
        public=True,
        duracao=4,
        created_at=timezone.now()
    )

    # Adicionar atrações ao roteiro de 4 dias
    roteiro_4dias_atracoes = [
        # Dia 1
        {'atracao': atracoes['projeto_tamar'], 'dia': 1, 'ordem': 1},
        {'atracao': atracoes['parque_vale'], 'dia': 1, 'ordem': 2},
        {'atracao': atracoes['restaurante_oca'], 'dia': 1, 'ordem': 3},
        # Dia 2
        {'atracao': atracoes['yoga_praia'], 'dia': 2, 'ordem': 4},
        {'atracao': atracoes['bike_calcadao'], 'dia': 2, 'ordem': 5},
        {'atracao': atracoes['restaurante_elgitano'], 'dia': 2, 'ordem': 6},
        # Dia 3
        {'atracao': atracoes['morro_moreno'], 'dia': 3, 'ordem': 7},
        {'atracao': atracoes['convento_penha'], 'dia': 3, 'ordem': 8},
        {'atracao': atracoes['cinema_brizz'], 'dia': 3, 'ordem': 9},
        # Dia 4
        {'atracao': atracoes['centro_historico'], 'dia': 4, 'ordem': 10},
        {'atracao': atracoes['passeio_veleiro'], 'dia': 4, 'ordem': 11},
        {'atracao': atracoes['restaurante_senac'], 'dia': 4, 'ordem': 12},
    ]

    for item in roteiro_4dias_atracoes:
        if item['atracao']:
            RoteiroAtracao.objects.create(
                id=uuid.uuid4(),
                roteiro=roteiro_4dias,
                atracao=item['atracao'],
                dia=item['dia'],
                ordem=item['ordem'],
                created_at=timezone.now()
            )

def remove_sample_roteiros(apps, schema_editor):
    Roteiros = apps.get_model('core', 'Roteiros')
    # Removendo os roteiros criados
    Roteiros.objects.filter(titulo='Final de Semana em Vitória').delete()
    Roteiros.objects.filter(titulo='Experiência Completa na Grande Vitória').delete()

class Migration(migrations.Migration):

    dependencies = [
        ('core', '0005_rename_duracao_estimada_roteiros_duracao_and_more'),
    ]

    operations = [
        migrations.RunPython(create_sample_roteiros, remove_sample_roteiros),
    ]
